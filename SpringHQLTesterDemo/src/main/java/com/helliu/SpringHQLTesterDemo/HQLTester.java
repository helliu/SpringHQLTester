package com.helliu.SpringHQLTesterDemo;

import java.awt.event.KeyEvent;
import java.util.Collections;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import org.hibernate.Session;
import org.hibernate.engine.spi.SessionFactoryImplementor;
import org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory;
import org.hibernate.hql.spi.QueryTranslator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.stereotype.Component;

import com.fasterxml.jackson.core.JsonProcessingException;


@SpringBootApplication
public class HQLTester implements CommandLineRunner {
	
	 @Autowired
	 private HQLViewer hQLViewer;


	public static void main(String[] args) {
		new SpringApplicationBuilder(HQLTester.class).headless(false).run(args);
	}
 

    @Override
    public void run(String... args) throws JsonProcessingException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {  
    	
    	hQLViewer.setVisible(true);
    	
    }	
}


@Component
class HQLViewer extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;

	 @PersistenceContext
	 private EntityManager entityManager;
	 
	 private boolean hadAnyExecutionError;
	
    public HQLViewer() {
        try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException
				| UnsupportedLookAndFeelException e) {
			System.out.println("Could not load Window Look and Feel for swing windows: " + e.getMessage());
		}
        
        initComponents();
        setLocationRelativeTo(null);
    }


	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        txtHQLQuery = new javax.swing.JTextArea();
        bntExecHQLQuery = new javax.swing.JButton();
        jTabs = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResult = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtGeneratedSQL = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HQLTester");

        txtHQLQuery.setColumns(20);
        txtHQLQuery.setRows(5);
        txtHQLQuery.setToolTipText("Ctrl + Enter to execute");
        txtHQLQuery.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtHQLQueryKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(txtHQLQuery);

        bntExecHQLQuery.setLabel("Execute");
        bntExecHQLQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntExecHQLQueryActionPerformed(evt);
            }
        });

        txtResult.setColumns(20);
        txtResult.setRows(5);
        jScrollPane1.setViewportView(txtResult);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
        );

        jTabs.addTab("Result", jPanel1);

        txtGeneratedSQL.setColumns(20);
        txtGeneratedSQL.setRows(5);
        jScrollPane3.setViewportView(txtGeneratedSQL);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
        );

        jTabs.addTab("Generated SQL", jPanel2);

        txtOutput.setColumns(20);
        txtOutput.setRows(5);
        jScrollPane4.setViewportView(txtOutput);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
        );

        jTabs.addTab("Output", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(bntExecHQLQuery, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabs))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bntExecHQLQuery)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabs)
                .addContainerGap())
        );

        jTabs.getAccessibleContext().setAccessibleName("Output");

        pack();
    }// </editor-fold>                        

    private void bntExecHQLQueryActionPerformed(java.awt.event.ActionEvent evt) {
    	executeSelectedHQL();
    }    


	private void txtHQLQueryKeyPressed(java.awt.event.KeyEvent evt) {                                       
        if(evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_ENTER)
        	executeSelectedHQL();
    }    


	private void clearResultFields() {
    	clearOutput();
    	txtResult.setText("");
    	txtGeneratedSQL.setText("");
	}                                            

    private void executeSelectedHQL() {
    	clearResultFields();
    	hadAnyExecutionError = false;
    	
    	String hqlQuery = txtHQLQuery.getText();
    			
    	String hqlResult = executeHQL(hqlQuery);
    	
    	String generatedSQL = generateSQLFromHQL(hqlQuery);
    	
    	txtResult.setText(hqlResult);
    	txtGeneratedSQL.setText(generatedSQL);
    	
    	if(hadAnyExecutionError && hqlResult == null)
    		jTabs.setSelectedIndex(2);
	}  


	@SuppressWarnings("rawtypes")
	private String executeHQL(String hqlQuery) {
    	List list = null;
    	String json = null;
    	
		try {
			list  = getListFromHQL(hqlQuery);
		} catch(Exception e) {
			setExecutionError("Error in execute hql", e);
			return  null;
		}
		
		try {
			json  = listToJson(list);
		} catch(Exception e) {
			setExecutionError("Error in converting result to json", e);
			return  null;
		}
		
		return json;
	}


	@SuppressWarnings("rawtypes")
	private String listToJson(List list) throws JsonProcessingException {
		return (new com.fasterxml.jackson.databind.ObjectMapper().writer().withDefaultPrettyPrinter()).writeValueAsString(list);
	}


	@SuppressWarnings("rawtypes")
	private List getListFromHQL(String hqlQuery) {
		Query query = entityManager.createQuery(hqlQuery);
		List list = query.getResultList();
		
		return list;
	}                               

    private String generateSQLFromHQL(String hqlQuery) {
    	String sqlQuery = null;
    	
    	try {
	    	ASTQueryTranslatorFactory queryTranslatorFactory = new ASTQueryTranslatorFactory();
	    	
	    	Session session = entityManager.unwrap(Session.class);
	    	SessionFactoryImplementor sessionFactory = (SessionFactoryImplementor)session.getSessionFactory(); 
	    	
	    	QueryTranslator queryTranslator = queryTranslatorFactory.createQueryTranslator("", hqlQuery, Collections.emptyMap(), sessionFactory, null);
	    	queryTranslator.compile(Collections.emptyMap(), false);
	    	
	    	sqlQuery = queryTranslator.getSQLString();
    	}catch(Exception e) {
    		setExecutionError("Error in generating SQL from HQL: ", e);
    	}
    	
    	
    	return sqlQuery;
	}

	private void setExecutionError(String errorMessage, Exception e) {
		hadAnyExecutionError = true;
		addOutput(errorMessage + ": " + e.getMessage());
		addOutput(e.getStackTrace().toString());
	}
	
	private void clearOutput() {
		txtOutput.setText("");
	}
	
	private void addOutput(String outputMessage) {
		String output = txtOutput.getText();
		
		String newOutput = output + "\n" + outputMessage;
		
		txtOutput.setText(newOutput);
	}

	/**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(HQLViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(HQLViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(HQLViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(HQLViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new HQLViewer().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton bntExecHQLQuery;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea txtOutput;
    private javax.swing.JTextArea txtGeneratedSQL;
    private javax.swing.JTextArea txtHQLQuery;
    private javax.swing.JTabbedPane jTabs;
    private javax.swing.JTextArea txtResult;
    // End of variables declaration                   
}

